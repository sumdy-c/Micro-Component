const DevPage = (S, change) => {

    return S(DIV).append(
        S(SPAN, '.page_title').html('Подход к разработке'),

        S(SPAN, ['.big_text_size', '.page_sub_title']).html('2.1 Философия'),

        textBlock(
            [
                'Чтобы погрузиться глубже, было бы неправильно не затронуть принципы, на которых построен Micro Component, чтобы у вас всегда был ответ на вопрос: "Почему так ?".',
                'В основе философии Micro Component лежит стремление сочетать привычное с инновационным. Библиотека стремится внедрять новые, удобные функции, такие как функционал SCSS или вещи подобные состоянию в React, без необходимости полностью переписывать существующие, потенциально огромные кодовые базы под новые технологии.',
                'Ведь вместо того чтобы заставлять разработчиков переделывать существующий код, Micro Component поощряет плавную интеграцию современных методов разработки в знакомые фреймворки.',
                'В сценариях, когда несложная веб-страница не требует внедрения полноценного SPA-фреймворка, библиотека Micro Component служит мостом. Она позволяет разработчикам освежить свои навыки работы с JQuery в современном ключе, способствуя созданию среды, в которой разработка является одновременно инновационной и практичной.',
                'По мере продвижения по последующим главам эта философия формирует фундамент, на котором строится библиотека, создавая среду, в которой разработка является одновременно современной и учитывает уже вашу созданую практику.',
                'Теперь мы можем приступить к непосредственному знакомству с работой Micro Component. Автор заранее просит у вас прощения, за такое затянутое начало.'
            ]
        ),

        S(SPAN, ['.big_text_size', '.page_sub_title']).html('2.2 Как раньше'),

        textBlock([
            'Давайте попробуем начать с того, что сразу используем возможности Micro Component на самом базовом уровне:'
        ]),

        codeBlock(
`.class {
    display: block
}
`, 'css'
        ),
        
        codeBlock(
`const S = new MicroComponent({ mutateCSS: true }).use(['example.css']);

S('DIV', '.class').text('Hello World!');
`, 'js'
        ),
            
        textBlock([
            'Только что мы создали элемент, тот кто часто пользуется JQuery уже может догадаться что тут происходит, и он уже обнаружил отличия от применения стандартного синтаксиса. Тем не менее, давайте подробнее остановимся, чтобы разобраться конкретнее, что тут произошло.'
        ]),
        codeBlock(
`// Тут мы создали контекст, о котором подробнее говорили в теме ранее
const S = new MicroComponent({ mutateCSS: true }).use(['example.css']);

// Далее мы вызываем функцию S, и передаём 2 параметра,
// Первый параметр ('DIV') - означает что мы создаем элемент <div>. 
// Второй параметр, ('.class') -  мы присвом, новому элементу класс, который указан в параметре
 
S('DIV', '.class')

// Далее, всем знакомым с jQuery пользователям будет ясно что мы тут делаем, а тем кто еще не догадался, мы вызваем стандартный метод .text(''), чтобы добавить в него строку "Hello World". 
.text('Hello World!');
`, 'js'),

        alertBlock('Стандартные функции jQuery',
            [
                'На самом деле, мы можем вызвать любой метод jQuery на элементе Micro Component, сделано это для бесшовной интеграции в уже существующий код.'
            ]
        ),

        textBlock([
            'Вы наверное задаёте вопрос, для чего нам еще один синтаксис, который делает то же самое, что и JQuery, но на самом деле это не так! При создании элемента таким способом, мы явно говорим Micro Component, что для этого интерфейса нужно будет загрузить необходимые метаданные, для его дальнейшей обработки функциями библиотеки.',
            'Но это не всё что произошло, ведь вы так же вы могли заметить, что у нас включена мутация css ( подробнее о параметрах, можете прочитать в прошлом разделе ) поэтому нам стоит посмотреть в html код и найти этот элемент',
        ]),

        codeBlock(
`<div class="SC_class-aLc3q1" sc="60827405687dEBud1" >
`, 'html'
        ),

        textBlock([
            'Сейчас вы уже не увидите класс который вы добавили при написании кода он изменился, и стал менее читаймым и красивым, но это даёт преимущество которое пользователи препроцессоров уже знают. Это безопасное использование повторяющихся имён классов .css',
            'Для тех кто задаёт вопрос, почему бы не подключить препроцессор css ( как пример sass ), ответ прост. За года написанный .css код в крупных проектах уже не перевести на scss, или это очень долго и дорого, так же иногда не бывает технических возможностей воспользоватся преимуществами препроцессоров, поэтому Micro Component поставлят свой вариант, без дополнительных подключений. Это просто работает.',
            'Но у нас есть еще один атрибут, ( sc="..." ), он идёт сразу после класса.',
            'Это уникальный ключ объекта, который генерируется при его создании, и позволяет скрывать контекст .css и VirtualDOM от внешних воздействий.'
        ]),

        alertBlock('Справка',
            [
                'Мы вернёмся к подробному изучению вопросов о контексте css кода и virtualDOM в последующих разделах'
            ]
        ),

        textBlock([
            'Так же, мы можем не указывать второй параметр, соответственно игнорируя добавления класса, но это не всё, мы можем интегрировать разные уже созданные элементы, в Micro Component, для последующего добавления функций. Давайте пока будем избегать использование библиотеки и попробуем написать пример когда-то написанного кода:',
        ]),

        codeBlock(
`$('<div>').addClass('old__class').html('Я очень важная функция в системе!')
`, 'js'
        ),

        textBlock([
            'Посмотрим что даст html',
        ]),

        codeBlock(
`<div class="old__class">Я очень важная функция в системе!</div>
`, 'html'
        ),

        textBlock([
            'Давайте мы оптимизируем этот код, чтобы он мог работать с Micro Component:',
        ]),

        codeBlock(
`const S = new MicroComponent({ mutateCSS: true }).use(['example.css']);

S($('<div>')).addClass('old__class').html('Я очень важная функция в системе!')
`, 'js'
        ),

        textBlock([
            'И сразу заглянем в html:',
        ]),

        codeBlock(
`'<div sc="60827468488J259bg" class="old__class">Я очень важная функция в системе!</div>'
`, 'html'
        ),

        textBlock([
            'Мы можем наблюдать как элемент приобрёл новый атрибут, с которым мы уже знакомы, и это все изменения которые с ним произошли на первый взгляд. Но на самом деле мы теперь можем использовать все функции Micro Component на этом элементе, причём мы совершенно не меняли код этого элемента, лишь обернули в функцию.',
            'Чтобы подкрепить слова примером, давайте поставим задачу, обернуть элемент в функцию стилизации, и присвоить ему один из безопасных классов Micro Component:',
        ]),

        codeBlock(
`const S = new MicroComponent({ mutateCSS: true }).use(['example.css']);

S($('<div>')).addClass('old__class').html('Я очень важная функция в системе!')

// Где то в другом файле...
$('.old__class').MCadd('.class')
`, 'js'
    ),

    codeBlock(
`<div class="old__class SC_class-kRdXxp" sc="608275025844slwSM">Я очень важная функция в системе!</div>
`, 'html'
    ),

        alertBlock("MCadd ?", 
        [
            'Вы могли обратить внимание на метод "MCadd", который вызвался как метод jQuery. На самом деле это метод добавления инструкции Micro Component, подробнее о них мы поговорим в последующих разделах.'
        ]),

        S(SPAN, ['.big_text_size', '.page_sub_title']).html('2.3 Интеграция'),

        textBlock([
            'Только что мы стандартными функциями JQuery добавили безопастный Micro Component класс в элемент, всё так просто!',
            'Теперь вы можете эксперементировать, вживляя функции Micro Component в существующий код, но в разработке такое использование скорее исключение чем правило. В данном случае такой пример был выбран для демонстрации интеграции со старым кодом.',
            'Лучшим решением использовать библиотеку, будет подход который исходит из её названия, создание микро компонентов и интеграция их в уже существующий код, давайте посморим небольшой пример кода:'
        ]),

        codeBlock(
`// Условно любой возможный jQuery код.

const query = () => {
    $.ajax({
        url: './example.php',
        type: "GET"			
    }).done(function (data) {
        // data = {
        //    num: number,
        //    list: array | null,
        // }
    }).error((err) => {
        console.error(err.message);
    })
}

$('<div>').css({ display: 'block' }).append(
    $('<span>').addClass('red__text').html('Ниже открыть окно'),
    $('<button>').addClass('test__button').html('Открыть окно').on('click', () => {
        console.log('окно открыто!');
        $('.red__text').html('Ниже закрыть окно');
        query();
        // some code
    })
).appendTo($('.wrapper'));
`, 'js'
        ),

        textBlock([
            'У нас есть готовый код, он работает, но проекты не стоят на месте, нам то и дело приходиться иметь дело с модернизацией существующей кодовой базы и добавлением новых функций. Искать проблемы практика конечно плохая, но для наших целей мы сделаем небольшое исключение, и она будет заключаться в том что,',
            '- при открытии модального окна, мы меняем текст в элементе span с красного ( он записан в классе css ) на синий, при условии пришедших данных равному одному.',
            '- если модальное окно открыто, то мы хотим добавить список элементов ( допустим товаров по скидке ) после текста, который может быть произвольный и приходит в ответе.',
            'Сначала для наглядности предлагается решить проблему стандартными путями, так давайте сделаем это:'
        ]),

        codeBlock(
`// Условно любой возможный jQuery код.

const query = () => {
    $.ajax({
        url: './example.php',
        type: "GET"			
    }).done(function (data) {
        if(data.num) {
            $('.red__text').removeClass('red__text').addClass('blue__text'),
        }
        
        if(data.list) {
            $('.list').append(
                data.list.map(element => {
                    return $('<li>').html(element.name);
                })
            )
        }

    }).error((err) => {
        $('.test__button').attr('disable', true);
        console.error(err.message);
    })
}

$('<div>').css({ display: 'block' }).append(
    $('<span>').addClass('red__text').html('Ниже открыть окно'),
    $('<div>').addClass('list'),
    $('<button>').addClass('test__button').html('Открыть окно').on('click', () => {
        console.log('окно открыто!');
        $('.red__text').html('Ниже закрыть окно');
        query();
        // some code
    })
).appendTo($('.wrapper'));
`, 'js'
        ),

        textBlock([
            'Этот код сможет решить наши проблемы, JQuery в целом способна много что решать удобным способом поэтому она и завоевала в своё время такую популярность, больше скажу и сейчас не стремится куда-то пропадать. По разным причинам.',
            'Определённо стоит так же заметить, не использовать подходы в написании кода из примера в производстве. Есть определённые стандарты, и допустим искать элементы по именам класса не всегда лучшая идея, но это мы оставим знатокам этой прекрасной библиотеки, а пока мы двинемся дальше и попробуем решить эту проблему используя Micro Component.'
        ]),

        codeBlock(
`// c применением практик Micro Component.

const UI = new State({
    text: null,
    button_active: true 
});

const LIST = new State(null);

const query = () => {
    $.ajax({
        url: './example.php',
        type: "GET"			
    }).done(function (data) {
        
        const stateObj = UI.get();
        stateObj.text = data.num;
        stateObj.button_active = true;
        UI.set(stateObj);
        LIST.set(data.list);

    }).error((err) => {
        $('.test__button').attr('disable', true);
        const stateObj = UI.get();
        stateObj.button_active = false;
        UI.set(stateObj);
        LIST.set(null);
        console.error(err.message);
    })
};

$('<div>').css({ display: 'block' }).append(
    S($('<span>')).addClass('red__text').MCstate(UI, function(ui) { 
        if(ui.text) {
            this.target.html('Ниже закрыть окно');
            return ['-red__text', '.blue__text'];
        } else {
            this.target.html('Ниже открыть окно');
            return ['.red__text', '-blue__text'];
        }
    }).html('Ниже открыть окно'),
    S(LIST, (list) => {
        S("DIV", '.list').append(
            list.map(element => {
                return S("LI").html(element.name);
            })
        )
    }),
    S($('<button>')).addClass('test__button').MCstate(UI, function(ui) { 
        this.attr('disable', ui.button_active);
        return null;
    }).html('Открыть окно').on('click', () => {
        console.log('окно открыто!');
        query();
        // some code
    })
).appendTo($('.wrapper'));
`, 'js'
        ),

        textBlock([
            'Ух, страшного кода стало так много!!!',
            'На самом деле мы уменьшили исходный код в очень много раз, просто конкретно тут в объявлении его стало порядком больше, это нужно лишь для того чтобы подключить все необходимые обработчики для создания контекста рендера.'
        ]),

        alertBlock("Рендеринг", 
        [
            'Мы будем познавать этот материал в разделах "Локальное состояние" и "Глобальное состояние". Не переживайте если вы не понимаете то, что написано в отдельных местах кода.'
        ]),


        textBlock([
            'В данном примере Micro Component из старого кода создал область, которую не нужно контролировать дополнительно. Мы привязали их контексту и тем самым разделили логику и отображение. Обратите внимание, что в функции query больше нет изменения элементов, там как и положено в современной разработке меняют только данные, а вот отображение изменено именно там где оно и находится.',
            'Важным моментом тут является то, что после ряда на самом деле простых изменений ( вы можете их наблюдать в примере, и они действительно простые ), которые принципиально не меняют старый код. Мы получили возможность реализовывать целый спектр подходов к разработке, а так же коллосальный для этих инструментов уровень безопасности и устойчивости нашего кода.',
            'Простой пример, в варианте с чистым JQuery наш код сломается если мы через месяц забыв про реализацию добавим еще один класс, и в запросе будут приходить два элемента. Сразу отвечу на справедливое замечание про id, но давайте будем честны перед собой, прикреплять идентификатор на каждый элемент не является самой хорошей практикой. Другое решение ? Есть, но селектор всегда можно испортить.',
            'На самом деле по этой причине Micro Component работает с ними по другим подходам, которые обеспечивают вам доступ к безопастной мутации элементов которые уже гораздо тяжелее сломать.',
            'Если после этой главы вам не до конца понятны подходы к разработке, то не пугайтесь, дальше по мере продвижения по документации мы будем смотреть разные варианты применения библиотеки, и вы с уверенностью сможете использовать все преимущества Micro Component для себя, и своих проектов.',
            'Сейчас уже пришло время, поговорить о стилизации Micro Component.'
        ]),

        S(DIV, '.link_button_block').append(
            S(SPAN, '.link_button').html('Работаем с CSS правильно: Безопасная стилизация ⟶').on('click', () => {
                change('save_style');
            })
        )
    );
}